@page "/tasks/addedit/{taskId:int}"
@using synctakerWeb.Models
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ProjectService ProjectService
@inject UserService UserService
@inject StatusService StatusService
@inject TaskService TaskService

<div class="container-fluid vh-100 p-4">
    <div class="row h-100">
        <div class="col-md-9 d-flex flex-column task-description">
            <h5>Description</h5>
            <textarea class="form-control flex-grow-1"
                      placeholder="Enter task description..."
                      disabled="@isFieldsDisabled"
                      @bind="taskDescription"></textarea>

            <div class="mt-3">
                <h6>Attachments</h6>
                <div class="d-flex gap-2 align-items-center">
                    <button class="btn btn-primary btn-sm" disabled="@isFieldsDisabled">Add Attachment</button>
                    <ul class="list-unstyled mb-0">
                        <li>
                            <a href="#">Attachment1.pdf</a>
                            <button class="btn btn-sm btn-danger ms-2" disabled="@isFieldsDisabled">Remove</button>
                        </li>
                        <li>
                            <a href="#">Attachment2.png</a>
                            <button class="btn btn-sm btn-danger ms-2" disabled="@isFieldsDisabled">Remove</button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-3 task-details">
            <h5>Details</h5>
            <form>
                <div class="mb-3">
                    <label for="project" class="form-label">Project</label>
                    <select id="project" class="form-select" @onchange="OnProjectChanged">
                        <option value="" selected disabled>-- Select Project --</option>
                        @foreach (var project in availableProjects)
                        {
                            <option value="@project.Id">@project.ProjectName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="priority" class="form-label">Priority</label>
                    <select id="priority" class="form-select" disabled="@isFieldsDisabled" @bind="selectedPriority">
                        <option value="">-- Select Priority --</option>
                        <option value="1"> [L] - Low</option>
                        <option value="2"> [N] - Normal</option>
                        <option value="3"> [H] - High</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="assignedTo" class="form-label">Assigned To</label>
                    <select id="assignedTo" class="form-select" disabled="@isFieldsDisabled" @bind="selectedAssignedToId">
                        <option value="">-- Select User --</option>
                        @foreach (var worker in accessedWorkers)
                        {
                            <option value="@worker.Id">@worker.FirstName @worker.LastName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="status" class="form-label">Status</label>
                    <select id="status" class="form-select" disabled="@isFieldsDisabled" @bind="selectedStatusId">
                        <option value="">-- Select Status --</option>
                        @foreach (var status in statuses)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="reviewer" class="form-label">Reviewer</label>
                    <select id="reviewer" class="form-select" disabled="@isFieldsDisabled" @bind="selectedReviewerId">
                        <option value="">-- Select Reviewer --</option>
                        @foreach (var worker in accessedWorkers)
                        {
                            <option value="@worker.Id">@worker.FirstName @worker.LastName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="tester" class="form-label">Tester</label>
                    <select id="tester" class="form-select" disabled="@isFieldsDisabled" @bind="selectedTesterId">
                        <option value="">-- Select Tester --</option>
                        @foreach (var worker in accessedWorkers)
                        {
                            <option value="@worker.Id">@worker.FirstName @worker.LastName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="realizationDate" class="form-label">Planned Realization Date</label>
                    <input type="date" id="realizationDate" class="form-control" disabled="@isFieldsDisabled" @bind="realizationDate"/>
                </div>

                <div class="col text-end">
                    <button class="btn btn-success" @onclick="SaveTaskAsync" disabled="@isSaveDisabled">Save All</button>
                </div>
            </form>
        </div>
    </div>
    <div class="toast-notification @toastClass">
        <div class="toast-header">
            Notification
        </div>
        <div>
            @notificationMessage
        </div>
    </div>
</div>

@code {
    [Parameter] public int taskId { get; set; }

    private bool isFieldsDisabled = true;
    private bool isSaveDisabled = true;
    private List<User> accessedWorkers = new List<User>();
    private List<Project> availableProjects = new List<Project>();
    private List<Status> statuses = new List<Status>();

    private TaskModel task = new TaskModel();

    // FIELDS
    private string selectedPriority = string.Empty;
    private int? selectedStatusId;
    private int selectedProjectId;
    private int? selectedAssignedToId;
    private int? selectedReviewerId;
    private int? selectedTesterId;
    private DateTime? realizationDate;
    private string taskDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        availableProjects = await ProjectService.GetProjectsAsync();

        if (taskId != 0)
        {
            task = await TaskService.GetTaskByIdAsync(taskId);

            // FIELDS LOAD
            selectedPriority = task.Priority;
            selectedStatusId = task.StatusId;
            selectedProjectId = task.ProjectId;
            selectedAssignedToId = task.AssignedToId;
            selectedReviewerId = task.ReviewerId;
            selectedTesterId = task.TestId;
            realizationDate = task.RealizationPlanned;
            taskDescription = task.Description;

            isFieldsDisabled = false;
            isSaveDisabled = false;
            selectedProjectId = task.ProjectId;
        }

        if (selectedProjectId != 0)
            GetActualData();
    }

    private async Task OnProjectChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int projectId))
        {
            selectedProjectId = projectId;
            await GetActualData();

            isFieldsDisabled = false;
            isSaveDisabled = false;

            StateHasChanged();
        }
    }

    private string notificationMessage = string.Empty;
    private string toastClass = string.Empty;

    private async Task SaveTaskAsync()
    {
        if (selectedStatusId != null)
        {
            try
            {
                var savedTaskId = await TaskService.SaveTaskAsync(new TaskSaveRequest
                    {
                        TaskId = taskId,
                        Priority = selectedPriority,
                        StatusId = selectedStatusId.Value,
                        ProjectId = selectedProjectId,
                        AssignedToId = selectedAssignedToId,
                        ReviewerId = selectedReviewerId,
                        TesterId = selectedTesterId,
                        RealizationPlanned = realizationDate,
                        Description = taskDescription
                    });

                Navigation.NavigateTo($"/tasks/addedit/{savedTaskId}");
                ShowToast("Task saved successfully!", "toast-success");
            }
            catch (Exception ex)
            {
                ShowToast("An error occurred while saving the task.", "toast-error");
            }
        }
        else
        {
            ShowToast("Please select a status before saving the task.", "toast-warning");
        }
    }

    private void ShowToast(string message, string additionalClass)
    {
        notificationMessage = message;
        toastClass = $"show {additionalClass}";

        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            notificationMessage = string.Empty;
            toastClass = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task GetActualData()
    {
        var users = await UserService.GetUsersAsync();
        accessedWorkers = users.Where(user =>
            user.ProjectUsers.Any(pu => pu.ProjectId == selectedProjectId)).ToList();

        statuses = await StatusService.GetStatusesAsync();

        StateHasChanged();
    }

}

